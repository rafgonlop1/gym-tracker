generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  
  workouts         Workout[]
  workoutTemplates WorkoutTemplate[]
}

model Exercise {
  id           String   @id @default(uuid())
  name         String   @unique
  category     String
  muscleGroups String[]
  
  workoutExercises  WorkoutExercise[]
  templateExercises TemplateExercise[]
}

model Workout {
  id        String        @id @default(uuid())
  userId    String
  date      DateTime      @db.Date
  type      WorkoutType
  createdAt DateTime      @default(now())
  
  user      User          @relation(fields: [userId], references: [id])
  exercises WorkoutExercise[]
  cardio    CardioSession?
  cmjTests  CMJTest[]
  
  @@index([userId, date])
  @@index([userId, date, type])
}

model CMJTest {
  id        String   @id @default(uuid())
  workoutId String
  heightCm  Float    // Jump height in centimeters
  notes     String?
  createdAt DateTime @default(now())
  
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model WorkoutExercise {
  id         String   @id @default(uuid())
  workoutId  String
  exerciseId String
  order      Int
  
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Set[]
  
  @@unique([workoutId, order])
}

model Set {
  id                String   @id @default(uuid())
  workoutExerciseId String
  reps              Int
  weight            Float
  rpe               Int?     // Rate of Perceived Exertion (1-10)
  notes             String?
  createdAt         DateTime @default(now())
  
  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
}

model CardioSession {
  id               String        @id @default(uuid())
  workoutId        String        @unique
  durationMinutes  Int
  distanceKm       Float?
  incline          Float?        // Incline percentage for treadmill
  mode             CardioMode?   // Treadmill, bike, elliptical, etc.
  avgHeartRate     Int?         // Average heart rate
  notes            String?
  
  workout          Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model WorkoutTemplate {
  id        String   @id @default(uuid())
  userId    String
  name      String
  type      WorkoutType
  
  user      User     @relation(fields: [userId], references: [id])
  exercises TemplateExercise[]
  
  @@unique([userId, name])
}

model TemplateExercise {
  id         String          @id @default(uuid())
  templateId String
  exerciseId String
  order      Int
  
  template   WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  exercise   Exercise        @relation(fields: [exerciseId], references: [id])
  
  @@unique([templateId, order])
}

enum WorkoutType {
  PULL
  PUSH
  LEGS
  CARDIO_Z2
  PLYOMETRICS
  HIIT
}

enum CardioMode {
  TREADMILL
  BIKE
  ELLIPTICAL
  ROWING
  OTHER
}